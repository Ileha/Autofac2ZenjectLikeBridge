<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
using System;
using Autofac;
using Autofac.Core;
using Autofac2ZenjectLikeBridge.Interfaces;
using JetBrains.Annotations;

namespace Autofac2ZenjectLikeBridge.Entities.Factories
{
    public static partial class DIExtensions
    {
        //generated amount <#@ include file="../../Constants.ttinclude" #><#= Constants.GenericParametersCount #>

<#
    for (var i = 0; i <= Constants.GenericParametersCount; i++)
    {
#>
        internal class AutofacSubScopeFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>
            : IFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>
            where TInstance : IDisposable
        {
            private readonly ILifetimeScope _scope;
            private readonly Action<ContainerBuilder<#= i == 0 ? "" : ", " #><#=
            string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #>> _subScopeLoader;

            public AutofacSubScopeFactory(ILifetimeScope scope,
                Action<ContainerBuilder<#= i == 0 ? "" : ", " #><#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #>> subScopeLoader)
            {
                _scope = scope ?? throw new ArgumentNullException(nameof(scope));
                _subScopeLoader = subScopeLoader ?? throw new ArgumentNullException(nameof(subScopeLoader));
            }

            public TInstance Create(<#= i == 0 ? "" : "\n\t\t\t\t" #><#=string.Join(",\n\t\t\t\t", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j} param{j}")) #>)
            {
                return _scope.ResolveFromSubScope<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>(_subScopeLoader<#= i == 0 ? "" : ",\n\t\t\t\t\t" #><#=
            string.Join(",\n\t\t\t\t\t", Enumerable.Repeat(0, i).Select((_, j) => $"param{j}")) #>);
            }
        }

<#
    }
#>

<#
    for (var i = 0; i <= Constants.GenericParametersCount; i++)
    {
#>
        internal class AutofacSubScopeModuleFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, TModule>
            : IFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>
            where TInstance : IDisposable
            where TModule : class, IModule
        {
            private readonly ILifetimeScope _scope;
            [CanBeNull] private readonly Func<ILifetimeScope, <#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TModule> _moduleFactory;

            public AutofacSubScopeModuleFactory(ILifetimeScope scope,
                [CanBeNull]
                Func<ILifetimeScope, <#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TModule> moduleFactory = null)
            {
                _scope = scope ?? throw new ArgumentNullException(nameof(scope));
                _moduleFactory = moduleFactory;
            }

            public TInstance Create(<#= i == 0 ? "" : "\n\t\t\t\t" #><#=string.Join(",\n\t\t\t\t", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j} param{j}")) #>)
            {
                return _scope.ResolveFromSubScope<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, TModule>(<#= i == 0 ? "" : "\n\t\t\t\t\t" #><#=
            string.Join(",\n\t\t\t\t\t", Enumerable.Repeat(0, i).Select((_, j) => $"param{j}")) #><#= i == 0 ? "" : ", " #>
                    _moduleFactory);
            }
        }

<#
    }
#>
    }
}