<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Autofac2ZenjectLikeBridge" #>
using System;
using Autofac;
using Autofac2ZenjectLikeBridge.Extensions.HarmonyPatcher;
using Autofac2ZenjectLikeBridge.Interfaces;

namespace Autofac2ZenjectLikeBridge.Entities.Factories
{
    public static partial class DIExtensions
    {
        //generated amount <#= Constants.GenericParametersCount #>

<#
    for (var i = 0; i <= Constants.GenericParametersCount; i++)
    {
#>
        private class AutofacSubScopeFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>
            : IFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>
            where TInstance : class, IDisposable
        {
            private readonly ILifetimeScope _scope;
            private readonly Action<ContainerBuilder<#= i == 0 ? "" : ", " #><#=
            string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #>> _subScopeInstaller;

            public AutofacSubScopeFactory(ILifetimeScope scope, Action<ContainerBuilder<#= i == 0 ? "" : ", " #><#=
            string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #>> subScopeInstaller)
            {
                _scope = scope ?? throw new ArgumentNullException(nameof(scope));
                _subScopeInstaller = subScopeInstaller ?? throw new ArgumentNullException(nameof(subScopeInstaller));
            }

            public TInstance Create(<#=
            string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j} param{j}")) #>)
            {
                var guid = Guid.NewGuid();

                var subScope = _scope
                    .BeginLifetimeScope(guid, subScopeBuilder =>
                    {
                        subScopeBuilder.OverrideExternallyOwnedInScope<TInstance>(guid);
                        _subScopeInstaller(subScopeBuilder<#= i == 0 ? "" : ", " #><#=
            string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"param{j}")) #>);
                    });

                var instance = subScope.Resolve<TInstance>();

                subScope
                    .AddToHarmony(instance);

                return instance;
            }
        }

<#
    }
#>
    }
}