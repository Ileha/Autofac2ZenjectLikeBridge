<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
using System;
using Autofac;
using Autofac.Builder;
using ZenAutofac.Builders.Factory;
using ZenAutofac.Entities.Factories;
using ZenAutofac.Interfaces;
using ZenAutofac.Interfaces.Builders.Factory;

namespace ZenAutofac
{
    public static partial class DIExtensions
    {
        //generated amount <#@ include file="Constants.ttinclude" #><#= Constants.GenericParametersCount #>

#region RegisterIFactoryExtended

<#
    for (var i = 0; i <= Constants.GenericParametersCount; i++)
    {
#>
        public static IExtendedFactoryBuilder<
            <#=string.Join(",\n\t\t\t", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ",\n\t\t\t" #>TInstance,
            IFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>,
            ConcreteReflectionActivatorData> RegisterIFactoryExtended<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>(this ContainerBuilder builder)
            where TInstance : class
        {
            if (builder is null)
                throw new ArgumentNullException(nameof(builder));

            return new ExtendedFactoryBuilder<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>(builder);
        }

<#
    }
#>
#endregion

#region IFactoryFromSubScope

<#
    for (var i = 0; i <= Constants.GenericParametersCount; i++)
    {
#>
        public static ISubScopeFactoryBuilder<
            <#=string.Join(",\n\t\t\t", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ",\n\t\t\t" #>TInstance,
            IFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>,
            ConcreteReflectionActivatorData> FromSubScope<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, TActivatorData>(
                this IExtendedFactoryBuilder<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, IFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>, TActivatorData> builder)
            where TInstance : class, IDisposable
        {
            if (builder is null)
                throw new ArgumentNullException(nameof(builder));

            return new SubScopeFactoryBuilder<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>(builder.Builder);
        }

<#
    }
#>
#endregion

#region RegisterPlaceholderFactoryExtended

<#
    for (var i = 0; i <= Constants.GenericParametersCount; i++)
    {
#>
        public static IExtendedFactoryBuilder<
            <#=string.Join(",\n\t\t\t", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ",\n\t\t\t" #>TInstance,
            TPlaceholderFactory,
            SimpleActivatorData> RegisterPlaceholderFactoryExtended<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, TPlaceholderFactory>(this ContainerBuilder builder)
            where TInstance : class
            where TPlaceholderFactory : PlaceholderFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>
        {
            if (builder is null)
                throw new ArgumentNullException(nameof(builder));

            return new ExtendedPlaceholderFactoryBuilder<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, TPlaceholderFactory>(builder);
        }

<#
    }
#>
#endregion

#region PlaceholderFactoryFromSubScope

<#
    for (var i = 0; i <= Constants.GenericParametersCount; i++)
    {
#>
        public static ISubScopeFactoryBuilder<
            <#=string.Join(",\n\t\t\t", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ",\n\t\t\t" #>TInstance,
            TPlaceholderFactory,
            SimpleActivatorData> FromSubScope<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, TPlaceholderFactory, TActivatorData>(
                this IExtendedFactoryBuilder<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, TPlaceholderFactory, TActivatorData> builder)
            where TInstance : class, IDisposable
            where TPlaceholderFactory : PlaceholderFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>
        {
            if (builder is null)
                throw new ArgumentNullException(nameof(builder));

            return new SubScopePlaceholderFactoryBuilder<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance, TPlaceholderFactory>(builder.Builder);
        }

<#
    }
#>
#endregion
    }
}