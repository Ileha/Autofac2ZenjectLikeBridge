<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Autofac2ZenjectLikeBridge" #>
using System;
using Autofac;
using Autofac.Builder;

namespace Autofac2ZenjectLikeBridge.Interfaces.Builders.Factory
{
    //generated amount <#= Constants.GenericParametersCount #>

<#
    for (var i = 0; i <= Constants.GenericParametersCount; i++)
    {
#>
    public interface ISubScopeFactoryBuilder<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"out TP{j}")) #><#= i == 0 ? "" : ", " #>out TInstance, out TFactory, out TActivatorData>
        : IExtendedBuilderBase
        where TInstance : class, IDisposable
        where TFactory : IFactory<<#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #><#= i == 0 ? "" : ", " #>TInstance>
    {
        IRegistrationBuilder<
            TFactory,
            TActivatorData,
            SingleRegistrationStyle> ByFunction(Action<ContainerBuilder<#= i == 0 ? "" : ", " #><#=string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"TP{j}")) #>> subScopeInstaller);

        IRegistrationBuilder<
            TFactory,
            TActivatorData,
            SingleRegistrationStyle> ByInstaller<TInstaller>()
            where TInstaller : class, IInstaller;
    }

<#
    }
#>
}